A user defined function is small program written by the user to perform operations within SQL statements. 
These operations tend to be easy to perform using another language and difficult to perform using SQL.

The benefits of UDFs are their use in many different places when compared to SQL stored procedures, such as using 
UDFs’ table features to break up complex code into shorter code blocks. UDFs also allow users to pass in parameters 
into database objects, as well as allowing users to return values that are based on any scalar values in the database.

Queries are database operations that retrieve information. These operations are usually written in a query language, 
such as SQL, XQuery, and DMX.

Stored Procedures are subroutines stored in the database catalog that allow the users to write procedures in simple, 
general-purpose languages. These procedures can then be used in queries to perform computations that cannot be performed 
in the query language alone.

The difference between UDFs and stored procedures are minimal. Stored procedures allow users to set each parameter as 
“IN”, “OUT”, or “INOUT”. This indicates whether the specific parameter is input-only, output-only, or input and output. 
Functions parameters are input-only, but they must specify a return-value type, which allows them to return information 
from the function.

PostgreSQL is an open-source, object relational database management system. It supports a majority of the SQL standard 
and offers complex queries, foreign keys, and transactional integrity, among other features. It can also be extended 
through features such as data types, functions, and procedural languages.

PostgreSQL traces its roots from the POSTGRES package made at the University of California at Berkeley. This software 
was first used in 1986, and was implemented in production and research applications, such as a medical information 
database, an asteroid tracking database, and a financial data analysis system.

The POSTGRES package was designed to be neutral concerning programming languages, because most databases at the time 
were accessed by programs written in different languages, such as spreadsheet software that is written in languages 
that are different from database or some programming languages.

While POSTGRES usage doubled in 1993, it also became a burden to Berkeley because of the large amounts of time Berkeley 
devoted to maintenance and support. In 1994, Andrew Yu and Jolly Chen made some improvements to POSTGRES, including 
adding a SQL language interpreter, trimming the source code size by 25%, and improving performance and maintainability. 
This new version was called Postgres95 and was released as open-source code.

In 1996, Postgres95 shifted its focus from fixing bugs in the server code to augmenting its features and capabilities 
(while still making improvements in all areas). Postgres95 was also renamed as PostgreSQL to show connection between 
Berkeley’s POSTGRES project and the latest versions with SQL.

PostgreSQL has four types of functions:
1. SQL functions
2. Procedural language UDFs
3. Internal functions written in C (PostgreSQL’s source code language)
4. C language UDFs

SQL functions are written in the regular SQL language for PostgreSQL and do not need any extra packages to install.

Procedural language UDFs are UDFs written in languages besides SQL and C. These languages, called procedural languages,
can be installed into the PostgreSQL server via loadable modules.

Internal functions are functions statically linked into the PostgreSQL server and are written in C. These functions are
declared during the initialization of the database cluster, but the user can create additional alias names for the
function (in addition to the SQL-use name) after initialization.

C language functions are similar to internal functions in terms of coding conventions. The differences are that the
functions can be written in C-compatible languages, such as C++. Another major difference is that these functions can be
loaded into the server on demand, instead of being loaded only upon initialization. C language functions are compiled
into loadable objects (shared libraries) and are loaded whenever the server needs them.


note: PostgreSQL 9.2 offers for SQL functions the ability to use parameter names within the function. PostgreSQL 9.1
does not have the ability. Therefore the user must use "$1" for example to take the place of a variable.

note: To install python to a particular database, use “createlang plpythonu dbname” in shell or “CREATE EXTENSION 
plpythonu” in query editor. You can also use plpython2u instead of plpythonu. Syntax differences between python 2 and 
3 do not appear to make a difference, though specifying in the shell “python” brings up python2, while specifying 
“python3” brings up python3.

note: You must install pllua.sql, which is located in /usr/share/postgresql/9.1/contrib. This is done by entering the 
directory and typing “psql –f pllua.sql dbname”.

note: Because of unknown reasons, this PL/Lua function does not work using the "REAL" data type. It works fine with the
"FLOAT" type, using type conversion on the table data.
